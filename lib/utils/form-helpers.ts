/**
 * Form Helper Utilities
 * Generated by code deduplication fixer
 */

import { useState, useCallback } from 'react';

// Generic form state hook
export const useFormState = <T extends Record<string, unknown>>(initialState: T) => {
  const [values, setValues] = useState<T>(initialState);
  const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const setValue = useCallback((key: keyof T, value: T[keyof T]) => {
    setValues(prev => ({ ...prev, [key]: value }));
    // Clear error when user starts typing
    if (errors[key]) {
      setErrors(prev => ({ ...prev, [key]: undefined }));
    }
  }, [errors]);

  const setError = useCallback((key: keyof T, error: string) => {
    setErrors(prev => ({ ...prev, [key]: error }));
  }, []);

  const reset = useCallback(() => {
    setValues(initialState);
    setErrors({});
    setIsSubmitting(false);
  }, [initialState]);

  return {
    values,
    errors,
    isSubmitting,
    setIsSubmitting,
    setValue,
    setError,
    reset,
  };
};

// Form validation helpers
export const validateRequired = (value: unknown, fieldName: string): string | undefined => {
  if (!value || (typeof value === 'string' && value.trim() === '')) {
    return `${fieldName} is required`;
  }
  return undefined;
};

export const validateEmail = (email: string): string | undefined => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return 'Please enter a valid email address';
  }
  return undefined;
};

export const validateMinLength = (value: string, minLength: number, fieldName: string): string | undefined => {
  if (value.length < minLength) {
    return `${fieldName} must be at least ${minLength} characters long`;
  }
  return undefined;
};

// Form submission handler
export const createFormHandler = <T>(
  onSubmit: (values: T) => Promise<void>,
  onSuccess?: () => void,
  onError?: (error: Error) => void
) => {
  return async (values: T) => {
    try {
      await onSubmit(values);
      onSuccess?.();
    } catch (error) {
      onError?.(error instanceof Error ? error : new Error('Form submission failed'));
    }
  };
};
