/**
 * Authentication Helper Utilities
 * Generated by code deduplication fixer
 */

import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

// User role checking
export const hasRole = (userRole: string, requiredRoles: string[]): boolean => {
  return requiredRoles.includes(userRole);
};

export const isAdmin = (userRole: string): boolean => {
  return hasRole(userRole, ['admin', 'super-admin']);
};

export const isEditor = (userRole: string): boolean => {
  return hasRole(userRole, ['admin', 'super-admin', 'editor-in-chief', 'section-editor', 'managing-editor']);
};

export const isReviewer = (userRole: string): boolean => {
  return hasRole(userRole, ['admin', 'super-admin', 'editor-in-chief', 'section-editor', 'reviewer']);
};

// Permission checking
export const checkPermission = (
  userRole: string,
  action: string,
  resource?: string
): boolean => {
  const permissions = {
    'admin': ['*'],
    'super-admin': ['*'],
    'editor-in-chief': ['read', 'write', 'delete', 'approve', 'assign'],
    'section-editor': ['read', 'write', 'approve', 'assign'],
    'managing-editor': ['read', 'write', 'approve'],
    'reviewer': ['read', 'write'],
    'author': ['read', 'write'],
    'user': ['read']
  };

  const userPermissions = permissions[userRole] || [];
  return userPermissions.includes('*') || userPermissions.includes(action);
};

// Server-side auth check
export const requireServerAuth = async (requiredRoles: string[] = []) => {
  const session = await getServerSession(authOptions);
  
  if (!session?.user) {
    throw new Error('Authentication required');
  }
  
  if (requiredRoles.length > 0 && !hasRole(session.user.role, requiredRoles)) {
    throw new Error('Insufficient permissions');
  }
  
  return session;
};

// Client-side auth check
export const useAuth = () => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Check authentication status
    const checkAuth = async () => {
      try {
        const response = await fetch('/api/auth/session');
        const session = await response.json();
        setUser(session.user || null);
      } catch (error) {
        setUser(null);
      } finally {
        setLoading(false);
      }
    };

    checkAuth();
  }, []);

  return { user, loading, isAuthenticated: !!user };
};
