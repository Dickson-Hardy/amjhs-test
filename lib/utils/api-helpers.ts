/**
 * API Helper Utilities
 * Generated by code deduplication fixer
 */

import { toast } from 'sonner';

// Generic API request handler
export const apiRequest = async <T>(
  endpoint: string,
  options: RequestInit = {}
): Promise<T> => {
  const response = await fetch(endpoint, {
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
    ...options,
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
  }

  return response.json();
};

// CRUD operations
export const apiGet = <T>(endpoint: string): Promise<T> =>
  apiRequest<T>(endpoint);

export const apiPost = <T>(endpoint: string, data: unknown): Promise<T> =>
  apiRequest<T>(endpoint, {
    method: 'POST',
    body: JSON.stringify(data),
  });

export const apiPut = <T>(endpoint: string, data: unknown): Promise<T> =>
  apiRequest<T>(endpoint, {
    method: 'PUT',
    body: JSON.stringify(data),
  });

export const apiDelete = <T>(endpoint: string): Promise<T> =>
  apiRequest<T>(endpoint, { method: 'DELETE' });

// API with toast notifications
export const apiWithToast = async <T>(
  apiCall: () => Promise<T>,
  successMessage: string,
  errorMessage: string
): Promise<T> => {
  try {
    const result = await apiCall();
    toast.success(successMessage);
    return result;
  } catch (error) {
    toast.error(errorMessage);
    throw error;
  }
};

// Pagination helper
export const createPaginationParams = (page: number, limit: number) => ({
  page: Math.max(1, page),
  limit: Math.min(100, Math.max(1, limit)),
  offset: (page - 1) * limit,
});

// Search params helper
export const createSearchParams = (params: Record<string, unknown>) => {
  const searchParams = new URLSearchParams();
  
  Object.entries(params).forEach(([key, value]) => {
    if (value !== undefined && value !== null && value !== '') {
      searchParams.append(key, String(value));
    }
  });
  
  return searchParams.toString();
};
